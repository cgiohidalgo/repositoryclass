accessible: false
author: ''
context: |+
    .. raw:: html

        <style> .help {color:#808000;} </style>

    .. role:: help

    .. class:: text-justify

    **Objetivos de aprendizaje**

    • Biblioteca estándar
    • Relación “contiene”
    • Refactorizar


    .. class:: text-justify

    **Enunciado**

    Lo ideal del programa principal (main) es que construya los objetos y active las primeras órdenes. Entonces, cuando hay demasiados algoritmos en el programa principal, es un indicador de que necesitamos diseñar más clases, para llevar allí esos algoritmos.
    El objetivo es dejar main() mucho más simple, sin ningún algoritmo (for, if, etc) en él.

    Tomaremos la solución al Taller 1 y la mejoraremos. Para ello vamos a crear la clase **EmpresaDeMudanza**. Esa empresa debe tener un nombre, un nit (string) y **una flota (vector) de Camiones**, inicialmente vacía. Después de construir la empresa, se le puede dar órdenes para que **compre** varios Camiones. Y después ya puede hacer la **mudanza** del Taller 1. En resumen:

    .. class:: text-justify

    **Requerimientos**

    • No modifique la clase Camion.
    • Añada la clase EmpresaDeMudanza, generalizando el problema, usando un vector de Camiones, donde primero se lleva cada objeto al primer camión, y si no cabe se intenta con el segundo, y si no cabe, se intenta con el tercero, etc.
    • En EmpresaDeMudanza.h ponga lo siguiente en el comentario de la clase (luego entenderá por qué): **RELACIONES: contiene Camiones**
    • Lo único que nos interesa saber después de hacer la mudanza es el total de peso transportado, que debe imprimirse en main().
    • En este laboratorio, solo se permite imprimir en pantalla desde main() y no desde ningún otro objeto.
    • Unos días después de entregar este trabajo, cada grupo tendrá que evaluar el código de otro grupo que yo le voy a suministrar, en un replit (por medio del campus virtual) donde pueden hacer mejoras al código del otro grupo y escribirlas en el archivo main(). Hacer una buena evaluación y mejoras influye un 10% en la nota del grupo evaluador (no influye en la nota del grupo evaluado).

    .. class:: text-justify

    **Tarea**

    Añada la clase EmpresaDeMudanza, generalizando el problema, usando un vector de Camiones, donde primero se lleva cada objeto al primer camión, y si no cabe se intenta con el segundo, y si no cabe, se intenta con el tercero, etc. Finalmente, calcular el total de peso transportado de la mudanza.


    .. code-block:: c++

        #Camion.h

        class Camion
        {
          private:
          string placaCamion;
          int capacidadMaxima;
          int pesoTotalCargado;

          public:
          /**
          Constructor. Variables iniciales a atributos internos.
          */
          Camion(string laPlaca, int laCapacidadMaxima);
          /**
          Evalua si puede cargar un objeto o no. Retorna 0 = false (No se puede hacer) y 1 = true (Se puede hacer).
          */
          bool cargarUnObjeto(int pesoDelObjeto);
          /**
          Hacer la mudanza. Retorna la carga que transporto.
          */
          int hacerMudanza();
          /**
          Saber cual es la placa del camion.
          */
          string cualEsLaPlaca();
        };

    .. code-block:: c++

        #Camion.cpp

        Camion::Camion(string laPlaca, int laCapacidadMaxima)
        {
          placaCamion = laPlaca;
          capacidadMaxima = laCapacidadMaxima;
          pesoTotalCargado = 0;
        }

        bool Camion::cargarUnObjeto(int pesoDelObjeto)
        {
          if(pesoTotalCargado + pesoDelObjeto <= capacidadMaxima)
          {
            pesoTotalCargado += pesoDelObjeto;
            return true;
          }
          else
            return false;
        }

        int Camion::hacerMudanza()
        {
          return pesoTotalCargado;
        }

        string Camion::cualEsLaPlaca()
        {
          return placaCamion;
        }

    .. code-block:: c++

        #main.cpp

        int main()
        {
          vector <int> objetos =
          {
            1000, 3000, 5000, 2000, 500, 1800, 4000, 30
          };

          EmpresaDeMudanza nuevaEmpresa("Camiones Mountain", "2498024-9");

          nuevaEmpresa.comprarCamion("YUI-988", 10000);
          nuevaEmpresa.comprarCamion("OIJ-807", 5000);
          nuevaEmpresa.comprarCamion("KHO-193", 5000);

          cout << nuevaEmpresa.cargarLosCamiones(objetos) << endl;

          return 0;
        }

    .. class:: text-justify




    **¿Qué se evalua?**

    .. raw:: html

        <ul>
        <li><strong>REQUERIMIENTOS (20%):&nbsp;</strong>
        <li><strong>ESTILO (20%):&nbsp;</strong>
        <li><strong>PROGRAMACIÓN (30%):&nbsp;</strong>
        <li><strong>COMPILACIÓN (10%):&nbsp;</strong>
        <li><strong>EJECUCIÓN (10%):&nbsp;</strong>
        <li><strong>EVALUACIÓN DE PARES (10%):&nbsp;</strong>

        </ul>


    |

    **Casos de prueba**
    -------------------


    .. container:: row

        .. container:: col-md-6 text-justify

            *Entradas*

            ::

                para este ejercicio
                no hay datos
                de entrada

        .. container:: col-md-6 text-justify

            *Salidas*

            ::

                17330

    |

    .. raw:: html

        <strong>Nota: </strong> <p><em><span style="color: #800000;">Finalice el &uacute;ltimo "cout" con "endl" para generar un salto de l&iacute;nea, de lo contrario puede recibir el veredicto de respuesta incorrecta.</span></em></p>

environment: multiple_languages
evaluate: best
generate_grader: true
grader_diff_context_lines: 3
grader_diff_max_lines: 100
grader_problem_id: lab02
grader_test_cases:
-   weight: 1.0
    diff_shown: true
    input_file: 1.in
    output_file: 1.out
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: Laboratorio 2
network_grading: false
order: 21
problems:
    lab02:
        name: ''
        allowed_exts:
        - .zip
        header: ''
        languages:
            cpp: cpp
        type: code_file_multiple_languages
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
treat_non_zero_as_runtime_error: false
vhdl_entity: ''
weight: 1.0
