accessible: false
author: Ángel E. García Baños
context: |+
    .. raw:: html

        <style> .help {color:#808000;} </style>

    .. role:: help

    .. class:: text-justify

    **Objetivos de aprendizaje**

    • Estilo correcto
    • Documentación
    • Depuración

    .. class:: text-justify

    **Enunciado**

    Hacer una mudanza en dos camiones (una clase y dos objetos): Vamos a modelar un camión para transportar mis objetos, que tienen distintos pesos. El camión tiene un número de placa y una capacidad máxima. Si se supera esa capacidad, el programa me avisará, para que el objeto que intento subir lo guarde en el otro camión.

    .. class:: text-justify

    **Tarea**


    Revise el programa que se le entrega (abajo), busque los defectos que tenga y corríjalos. Recuerde que ustede debe entregar un programa usando el Paradigma Orientado a Objetos

    .. code-block:: c++

        #include <iostream>
        using namespace std;

        class Camion
        {
          private:
            string pl;
            int cm;
            int ptc;

          public:
            Camion(string laPlaca, int laCapacidadMaxima);
            bool cargarUnObjeto(int pesoDelObjeto);  // true = se pudo hacer; false = no se pudo
            int hacerMudanza();  // Retorna la carga que transportó
            string cualEsLaPlaca();
        }

        Camion::Camion(string laPlaca, int laCapacidadMaxima)
        {
          pl = laPlaca;  cm = laCapacidadMaxima;   ptc = 0; }

        bool Camion::cargarUnObjeto(int pesoDelObjeto) {
          if(ptc + pesoDelObjeto <= cm) {
            ptc = ptc - pesoDelObjeto;
          return true;}else return false;
                                        }

        int Camion::hacerMudanza() {  return ptc; } string Camion::cualEsLaPlaca() {  return pl; }

        int Main()
        {
          Camion unCamion("ABC-001", 10000)
          Camion otroCamion("DEF-002", 5000);

          int objetos[8] =
          {
            1000, 3000, 5000, 2000, 500, 1800, 4000, 30
          };

          for(int cualObjeto = 0; cualObjeto < 8; cualObjeto++)
          {
            int objetoATransportar = objetos[cualObjeto];
            if(not unCamion.cargarUnObjeto(objetoATransportar))
              if(not otroCamion.cargarUnObjeto(objetoATransportar))
                cout << "El objeto número " << cualObjeto << " que pesa " << objetos[cualObjeto] << " no se puede cargar en ningún camión." << endl;
          }

          cout << "El camión " << unCamion.cualEsLaPlaca() << " transportó " << unCamion.hacerMudanza() << " kg." << endl;
          cout << "El camión " << otroCamion.cualEsLaPlaca() << " transportó " << otroCamion.hacerMudanza() << " kg." << endl;

          return 0;
        }

    .. class:: text-justify




    **¿Qué se evalua?**

    .. raw:: html

        <ul>
        <li><strong>ESTILO (65%):&nbsp;</strong>
        <ul>
        <li> <strong><span style="color: #339966;">ARCHIVOS_SOLICITADOS (5%)</span>&nbsp;</strong> ¿Están todos los archivos solicitados?&nbsp;</li>
        <li> <strong><span style="color: #339966;">CLASE_EN_DOS_ARCHIVOS (10%)</span>&nbsp;</strong>  ¿Cada clase está separada en dos archivos .h y .cpp?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> NOMBRE_CLASE_Y_ARCHIVO (5%) </span>&nbsp;</strong> ¿El nombre de la clase coincide con el archivo donde está y el archivo comienza por letra mayúscula?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> COMENTARIO_CABECERA (5%) </span>&nbsp;</strong> ¿Tienen todos los archivos las cabeceras exigidas (autor, email, fecha)?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> COMENTARIO_CLASE (5%) </span>&nbsp;</strong> ¿Los archivos .h tienen los comentarios de CLASE, INTENCIÓN y RELACIONES?&nbsp;</li>
        <li><strong><span style="color: #339966;"> COMENTARIO_FUNCION (5%)  </span>&nbsp;</strong> ¿Cada función va precedida de un comentario /** ... */ ?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> COMENTARIO_HISTORIA/PROPOSITO (5%) </span>&nbsp;</strong> ¿En el programa principal hay un comentario que cuenta una historia?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> UNA_SENTENCIA_POR_LINEA (5%) </span>&nbsp;</strong> ¿En cada línea hay una sola sentencia?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> LLAVES (5%) </span>&nbsp;</strong> ¿Están las llaves{} adecuadamente puestas para agrupar código y alineadas en la misma vertical?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> INDENTACION (5%) </span>&nbsp;</strong> ¿El código dentro de las llaves está indentado 2 espacios hacia la derecha ?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> BUENOS_NOMBRES (5%) </span>&nbsp;</strong> ¿Los nombres de las variables, clases, objetos y funciones se entienden?&nbsp;</li>
        <li> <strong><span style="color: #339966;"> LETRA_INICIAL (5%) </span>&nbsp;</strong> ¿Las clases comienzan por letra mayúscula y el resto por letra minúscula?&nbsp;</li>
        </ul>
        </li>
        <li><strong>PROGRAMACIÓN (15%):&nbsp;</strong>
        <ul>
        <li><strong><span style="color: #339966;"> ORIENTADO_OBJETOS (5%) </span>&nbsp;</strong> ¿Se respeta la encapsulación? </li>
        <li><strong><span style="color: #339966;"> GUARDA (5%) </span>&nbsp;</strong> ¿Existen las guardas en los archivos .h y son correctas?  </li>
        <li><strong><span style="color: #339966;"> INCLUDES (5%)  </span>&nbsp;</strong> ¿Están puestos los #include necesarios y en los lugares adecuados?  </li>
        <li><strong><span style="color: #339966;"> ALGORITMO (0%)  </span>&nbsp;</strong> La calidad del algoritmo no la voy a evaluar en este laboratorio, pues se lo doy hecho.  </li>



        </ul>
        </li>
        <li><strong>COMPILACIÓN (5%):&nbsp;</strong>
        <ul>
        <li><strong><span style="color: #339966;"> COMPILAR (5%)  </span>&nbsp;</strong> ¿Compila sin errores ni warnings? En caso de que haya warnings intente eliminarlos también </li>
        </ul>
        </li>
        <li><strong>EJECUCIÓN (15%):&nbsp;</strong>
        <ul>
        <li><strong><span style="color: #339966;"> EJECUTAR (5%)  </span>&nbsp;</strong>  ¿Se puede ejecutar sin problemas?</li>
        <li><strong><span style="color: #339966;"> BLOQUEO (5%)  </span>&nbsp;</strong> ¿Se bloquea el programa con las entradas especificadas?</li>
        <li><strong><span style="color: #339966;"> RESULTADOS (5%)  </span>&nbsp;</strong> ¿Da los resultados esperados (ensaye con varias entradas)? </li>
        </ul>
        </li>
        </ul>


    |

    **Casos de prueba**
    -------------------


    .. container:: row

        .. container:: col-md-6 text-justify

            *Entradas*

            ::

                para este ejercicio
                no hay datos
                de entrada

        .. container:: col-md-6 text-justify

            *Salidas*

            ::

                El objeto número 6 que pesa 4000 no se puede cargar en ningún camión.
                El camión ABC-001 transportó 9530 kg.
                El camión DEF-002 transportó 3800 kg.

    |

    .. raw:: html

        <strong>Nota: </strong> <p><em><span style="color: #800000;">Finalice el &uacute;ltimo "cout" con "endl" para generar un salto de l&iacute;nea, de lo contrario puede recibir el veredicto de respuesta incorrecta.</span></em></p>

environment: multiple_languages
evaluate: best
generate_grader: true
grader_diff_context_lines: 3
grader_diff_max_lines: 100
grader_problem_id: lab01
grader_test_cases:
-   weight: 1.0
    diff_shown: true
    input_file: 1.in
    output_file: 1.out
groups: false
input_random: '0'
limits:
    output: '2'
    time: '30'
    memory: '100'
name: Laboratorio 1
network_grading: false
order: 11
problems:
    lab01:
        languages:
            cpp: cpp
        type: code_file_multiple_languages
        allowed_exts:
        - .zip
        header: ''
        name: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
treat_non_zero_as_runtime_error: false
vhdl_entity: ''
weight: 1.0
